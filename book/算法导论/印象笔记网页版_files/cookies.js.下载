define("cookies", ["common"], function(__WEBPACK_EXTERNAL_MODULE_131__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 526);
/******/ })
/************************************************************************/
/******/ ({

/***/ 131:
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_131__;

/***/ }),

/***/ 526:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /* eslint-env browser */


var _common = __webpack_require__(131);

var common = _interopRequireWildcard(_common);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Utility functions for getting and setting cookies.
 */
var DELIMITER = '; ';
var MAX_LENGTH = 4096;

var Cookies = function () {
  function Cookies() {
    _classCallCheck(this, Cookies);
  }

  _createClass(Cookies, null, [{
    key: '_splitCookie',

    /**
     * Split a cookie into its name and value parts.
     *
     * Returns an array where ret[0] is the cookie name and ret[1] is the cookie
     * value
     */
    value: function _splitCookie(cookieString) {
      var idx = cookieString.indexOf('=');
      if (idx < 1) {
        throw new Error('Invalid cookie value: ' + cookieString);
      }
      return [cookieString.substring(0, idx), cookieString.substring(idx + 1)];
    }

    /**
     * Get the value of the cookie with the given name.
     */

  }, {
    key: 'get',
    value: function get(name) {
      var slotSuffix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

      name += slotSuffix;
      // split the cookie string into the component cookies
      var cookies = document.cookie.split(DELIMITER);
      for (var i = 0; i < cookies.length; i++) {
        var cookiePair = Cookies._splitCookie(cookies[i]);
        if (cookiePair[0] === name) {
          // name matches, return value
          return unescape(cookiePair[1]);
        }
      }
      // no cookie found with the given name
      return '';
    }

    /**
     * Set the name cookie to the passed value with an expiry ttl millis in the
     * future. If ttl is -1, the cookie created will be a session cookie.
     */

  }, {
    key: 'set',
    value: function set(name, value, ttl, path) {
      var cookie = name + '=' + escape(value) + DELIMITER;
      var expires = void 0;
      if (ttl > -1) {
        var now = new Date();
        now.setTime(now.getTime() + ttl);
        expires = now.toGMTString();
      } else if (ttl === -1) {
        // session cookie
        expires = '0';
      } else {
        // Invalid ttl, don't create cookie
        throw new Error('cookies: ttl must be >= -1 but was ' + ttl);
      }
      // IE requires leaving out "expires" if it's a session cookie
      if (expires !== '0' || !common.isIE) {
        cookie += 'expires=' + expires + DELIMITER;
      }

      if (document.location.href.indexOf('https') === 0) {
        cookie += 'secure';
        cookie += DELIMITER;
      }

      if (!path) {
        path = '/';
      }
      cookie += 'path=' + path + DELIMITER;

      if (cookie.length > MAX_LENGTH) {
        throw new DOMException(DOMException.QUOTA_EXCEEDED_ERR);
      }
      document.cookie = cookie;
    }
  }, {
    key: 'unset',
    value: function unset(name) {
      document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';
    }
  }]);

  return Cookies;
}();

exports.default = Cookies;
module.exports = exports['default'];

/***/ })

/******/ })});;